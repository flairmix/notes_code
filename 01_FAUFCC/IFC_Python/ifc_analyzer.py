class IFCAnalyzer:
    def __init__(self, dataset):
        self.dataset = dataset

    def print_summary(self, category=None):
        if category:
            if category not in self.dataset:
                print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            print(f"\nüìÇ –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.upper()}':")
            for key, items in self.dataset[category].items():
                print(f"‚Ä¢ {key.capitalize()}: {len(items)} —à—Ç.")
        else:
            print("\nüìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for cat_name, cat_data in self.dataset.items():
                total = sum(len(items) for items in cat_data.values())
                print(f"{cat_name.capitalize()}: {total} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    def print_elements(self, category, element_type):
        if category not in self.dataset:
            print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if element_type not in self.dataset[category]:
            print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç '{element_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.")
            return

        elements = self.dataset[category][element_type]
        print(f"\nüîç –≠–ª–µ–º–µ–Ω—Ç—ã '{element_type}' –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':")

        for el in elements:
            guid = getattr(el, "GlobalId", "–ë–µ–∑ GUID")

            if element_type == "spaces":
                name = getattr(el, "Name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
                number = getattr(el, "LongName", "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞")
                desc = getattr(el, "Description", "")
                print(f"- [{number}] {name} | {desc} [GUID: {guid}]")
            else:
                name = getattr(el, "Name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
                print(f"- {name} [GUID: {guid}]")

    def print_element_properties(self, category, element_type):
        if category not in self.dataset or element_type not in self.dataset[category]:
            print(f"‚ö†Ô∏è –†–∞–∑–¥–µ–ª '{category}' –∏–ª–∏ —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ '{element_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        elements = self.dataset[category][element_type]
        if not elements:
            print("‚ö†Ô∏è –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.")
            return

        element = elements[0]
        print(f"\nüîç –°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ '{element_type}' (–ø–µ—Ä–≤—ã–π –∏–∑ {len(elements)}):\n")

        # üìÑ –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã IFC
        print("üìÑ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è IFC:")
        base_attrs = ["Name", "LongName", "Description", "ObjectType", "GlobalId", "PredefinedType"]
        for attr in base_attrs:
            val = getattr(element, attr, None)
            if val is not None:
                print(f"‚Ä¢ {attr}: {val}")

        # üß© –°–≤–æ–π—Å—Ç–≤–∞ –∏–∑ PropertySet-–æ–≤
        print("\nüß© –°–≤–æ–π—Å—Ç–≤–∞ –∏–∑ PropertySet-–æ–≤:")
        for rel in getattr(element, "IsDefinedBy", []):
            if rel.is_a("IfcRelDefinesByProperties"):
                prop_set = rel.RelatingPropertyDefinition
                if prop_set.is_a("IfcPropertySet"):
                    print(f"\nüì¶ {prop_set.Name}")
                    for prop in prop_set.HasProperties:
                        name = prop.Name
                        value = getattr(prop, "NominalValue", None)
                        if hasattr(value, "wrappedValue"):
                            value = value.wrappedValue
                        print(f"‚Ä¢ {name}: {value}")

    def get_property_value(self, category, element_type, property_name):
        if category not in self.dataset or element_type not in self.dataset[category]:
            print(f"‚ö†Ô∏è –†–∞–∑–¥–µ–ª '{category}' –∏–ª–∏ —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ '{element_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        elements = self.dataset[category][element_type]
        if not elements:
            print("‚ö†Ô∏è –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.")
            return

        results = []

        print(f"\nüîç –ó–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{property_name}' –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ '{element_type}':\n")
        for el in elements:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤–∑—è—Ç—å –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ IFC
            if hasattr(el, property_name):
                val = getattr(el, property_name)
            else:
                val = self._get_property_from_sets(el, property_name)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ë—Ä—Ç–∫–∏ ifcopenshell
            if hasattr(val, "wrappedValue"):
                val = val.wrappedValue

            name = getattr(el, "Name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            print(f"‚Ä¢ {name}: {val}")
            results.append((name, val))

        return results

    def _get_property_from_sets(self, element, target_name):
        for rel in getattr(element, "IsDefinedBy", []):
            if rel.is_a("IfcRelDefinesByProperties"):
                prop_set = rel.RelatingPropertyDefinition
                if prop_set.is_a("IfcPropertySet"):
                    for prop in prop_set.HasProperties:
                        if prop.Name == target_name:
                            return getattr(prop, "NominalValue", None)
        return None

    def list_available(self):
        print("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for cat_name, elements in self.dataset.items():
            print(f"\n{cat_name.upper()}:")
            for key in elements.keys():
                print(f"  - {key}")
